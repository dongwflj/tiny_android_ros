// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/prof_dag.proto

#include "caffe2/proto/prof_dag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace caffe2 {
class ProfDAGProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProto>
      _instance;
} _ProfDAGProto_default_instance_;
class ProfDAGProtosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProtos>
      _instance;
} _ProfDAGProtos_default_instance_;
}  // namespace caffe2
namespace protobuf_caffe2_2fproto_2fprof_5fdag_2eproto {
void InitDefaultsProfDAGProtoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::caffe2::_ProfDAGProto_default_instance_;
    new (ptr) ::caffe2::ProfDAGProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ProfDAGProto::InitAsDefaultInstance();
}

void InitDefaultsProfDAGProto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProfDAGProtoImpl);
}

void InitDefaultsProfDAGProtosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::InitDefaultsProfDAGProto();
  {
    void* ptr = &::caffe2::_ProfDAGProtos_default_instance_;
    new (ptr) ::caffe2::ProfDAGProtos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ProfDAGProtos::InitAsDefaultInstance();
}

void InitDefaultsProfDAGProtos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProfDAGProtosImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProto, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProto, stddev_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProtos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProtos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::caffe2::ProfDAGProtos, stats_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::caffe2::ProfDAGProto)},
  { 11, 17, sizeof(::caffe2::ProfDAGProtos)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_ProfDAGProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_ProfDAGProtos_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "caffe2/proto/prof_dag.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033caffe2/proto/prof_dag.proto\022\006caffe2\":\n"
      "\014ProfDAGProto\022\014\n\004name\030\001 \002(\t\022\014\n\004mean\030\002 \002("
      "\002\022\016\n\006stddev\030\003 \002(\002\"4\n\rProfDAGProtos\022#\n\005st"
      "ats\030\001 \003(\0132\024.caffe2.ProfDAGProto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2/proto/prof_dag.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_caffe2_2fproto_2fprof_5fdag_2eproto
namespace caffe2 {

// ===================================================================

void ProfDAGProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProto::kNameFieldNumber;
const int ProfDAGProto::kMeanFieldNumber;
const int ProfDAGProto::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProto::ProfDAGProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::InitDefaultsProfDAGProto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProto)
}
ProfDAGProto::ProfDAGProto(const ProfDAGProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stddev_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
}

ProfDAGProto::~ProfDAGProto() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProto)
  SharedDtor();
}

void ProfDAGProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfDAGProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProto::descriptor() {
  ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfDAGProto& ProfDAGProto::default_instance() {
  ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::InitDefaultsProfDAGProto();
  return *internal_default_instance();
}

ProfDAGProto* ProfDAGProto::New(::google::protobuf::Arena* arena) const {
  ProfDAGProto* n = new ProfDAGProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stddev_) -
        reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfDAGProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float stddev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProto)
  return false;
#undef DO_
}

void ProfDAGProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // required float stddev = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProto)
}

::google::protobuf::uint8* ProfDAGProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // required float stddev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProto)
  return target;
}

size_t ProfDAGProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_mean()) {
    // required float mean = 2;
    total_size += 1 + 4;
  }

  if (has_stddev()) {
    // required float stddev = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProfDAGProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required float mean = 2;
    total_size += 1 + 4;

    // required float stddev = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfDAGProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProto)
    MergeFrom(*source);
  }
}

void ProfDAGProto::MergeFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      stddev_ = from.stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfDAGProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProto::CopyFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ProfDAGProto::Swap(ProfDAGProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProto::InternalSwap(ProfDAGProto* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProto::GetMetadata() const {
  protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProfDAGProtos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProtos::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProtos::ProfDAGProtos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::InitDefaultsProfDAGProtos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProtos)
}
ProfDAGProtos::ProfDAGProtos(const ProfDAGProtos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::SharedCtor() {
  _cached_size_ = 0;
}

ProfDAGProtos::~ProfDAGProtos() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProtos)
  SharedDtor();
}

void ProfDAGProtos::SharedDtor() {
}

void ProfDAGProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProtos::descriptor() {
  ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfDAGProtos& ProfDAGProtos::default_instance() {
  ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::InitDefaultsProfDAGProtos();
  return *internal_default_instance();
}

ProfDAGProtos* ProfDAGProtos::New(::google::protobuf::Arena* arena) const {
  ProfDAGProtos* n = new ProfDAGProtos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfDAGProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProtos)
  return false;
#undef DO_
}

void ProfDAGProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProtos)
}

::google::protobuf::uint8* ProfDAGProtos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stats(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProtos)
  return target;
}

size_t ProfDAGProtos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProtos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .caffe2.ProfDAGProto stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProtos)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfDAGProtos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProtos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProtos)
    MergeFrom(*source);
  }
}

void ProfDAGProtos::MergeFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProtos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void ProfDAGProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProtos::CopyFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProtos::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  return true;
}

void ProfDAGProtos::Swap(ProfDAGProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProtos::InternalSwap(ProfDAGProtos* other) {
  using std::swap;
  stats_.InternalSwap(&other->stats_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProtos::GetMetadata() const {
  protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_caffe2_2fproto_2fprof_5fdag_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
